require 'yaml'
require 'redcarpet'

include 'main.rb'

class Post
  def initialize(filename)
    @filename = filename
  end

  def rawcontents
    @rawcontents ||= File.read(@filename)
  end

  def rawfrontmatter
    @rawfrontmatter ||= rawcontents.split('---')[1]
  end

  def rawinside
    @rawinside ||= rawcontents.split('---',3)[2].gsub(/{% img(.+?)%}/, '<img src="\1" class="img-responsive"/>')

  end

  def frontmatter
    @frontmatter ||= YAML.unsafe_load(rawfrontmatter)
  end

  def date
    toks = @filename.split('/')[1].split('-')

    res = Time.new(toks[0].to_i, toks[1].to_i, toks[2].to_i)

    if frontmatter['date']
      res = frontmatter['date']
      if res.is_a? String
        res = Time.parse(frontmatter['date'])
      end
    end
    res
  end

  def categories
    frontmatter['categories']
  end

  def tags
    (frontmatter['tags'] || []).map {|x| x.downcase}
  end

  def title
    frontmatter['title']
  end

  def content
    markdown = Redcarpet::Markdown.new(
      Redcarpet::Render::HTML,
      autolink: true,
      tables: true,
      fenced_code_blocks: true
    )


    markdown.render(rawinside).sub(/<p>([A-Z])/, '<p><span class="dropcap">\1</span>')
  end

  def short_content
    markdown = Redcarpet::Markdown.new(
      Redcarpet::Render::HTML,
      autolink: true,
      tables: true,
      fenced_code_blocks: true
    )

    markdown.render(rawinside[0..300] + '...')
  end

  def page_path
    dpart = @filename.split('/')[1].split('.')[0].split('-')[0..2].join('/')
    apart = @filename.split('/')[1].split('.')[0].split('-')[3..-1].join('-')

    [dpart, apart].join('/')
  end

  def year
    "#{date.year}"
  end

  def year_month
    "#{date.year}/#{date.month.to_s.rjust(2, '0')}"
  end

  def year_month_day
    "#{date.year}/#{date.month.to_s.rjust(2, '0')}/#{date.day.to_s.rjust(2, '0')}"
  end

  def published
    frontmatter['published'] == true || frontmatter['published'].nil?
  end

end

files = Dir["posts/*.*"]

posts = files.map {|x| Post.new(x)}.reject{|x| !x.published}.sort_by{|x| x.date}.reverse

categories = {}
tags = {}
history = {}
yearhistory = {}
dayhistory = {}

posts.each do |post|
  post.categories.each do |cat|
    categories[cat] ||= []
    categories[cat] << post
  end

  post.tags.each do |cat|
    tags[cat] ||= []
    tags[cat] << post
  end

  history[post.year_month] ||= []
  history[post.year_month] << post

  yearhistory[post.year] ||= []
  yearhistory[post.year] << post

  dayhistory[post.year_month_day] ||= []
  dayhistory[post.year_month_day] << post
end

inf = {
  categories: categories,
  tags: tags.sort_by{|k,v| -v.length},
  history: history
}

posts.each do |post|
  create_page inf: inf, path: post.page_path, title: post.title do
    header do
      col 12 do
        h1 post.title
        h6 post.date.to_formatted_s(:long)

        hr
      end
    end

    row do
      col 12 do
        text post.content
      end
    end

    row do
      col 12 do
      end
    end
  end
end


post_collection_page(inf, posts) do |i|
  path = i.to_s
  title = "Page #{i}"
  if i == 0
    path = ''
    title = 'Home'
  end

  {
    path: path,
    title: title,
    header: "David's blog"
  }
end

categories.each do |catname,catposts|

  post_collection_page(inf, catposts) do |i|
    path = "categories/#{catname}"
    title = "Category: #{catname} Page #{i+1}"
    if i != 0
      path = "categories/#{catname}/#{i}"
    end

    {
      path: path,
      title: title,
      header: "Category: #{catname}"
    }
  end

end

tags.each do |tagname,tagposts|

  post_collection_page(inf, tagposts) do |i|
    path = "tags/#{tagname}"
    title = "Tag: #{tagname} Page #{i+1}"
    if i != 0
      path = "tags/#{tagname}/#{i}"
    end

    {
      path: path,
      title: title,
      header: "Tag: #{tagname}"
    }
  end

end

history.each do |histname,histposts|
  post_collection_page(inf, histposts) do |i|
    path = "#{histname}"
    title = "Posts from #{histname} Page #{i+1}"
    if i != 0
      path = "#{histname}_#{i}"
    end

    {
      path: path,
      title: title,
      header: "Posts from #{histname}"
    }
  end
end

yearhistory.each do |histname,histposts|
  post_collection_page(inf, histposts) do |i|
    path = "#{histname}"
    title = "Posts from #{histname} Page #{i+1}"
    if i != 0
      path = "#{histname}_#{i}"
    end

    {
      path: path,
      title: title,
      header: "Posts from #{histname}"
    }
  end
end

dayhistory.each do |histname,histposts|
  post_collection_page(inf, histposts) do |i|
    path = "#{histname}"
    title = "Posts from #{histname} Page #{i+1}"
    if i != 0
      path = "#{histname}_#{i}"
    end

    {
      path: path,
      title: title,
      header: "Posts from #{histname}"
    }
  end
end
